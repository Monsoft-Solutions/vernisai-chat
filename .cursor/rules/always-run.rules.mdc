---
description: 
globs: 
alwaysApply: false
---
# General Implementation Guidelines

These guidelines ensure that every piece of work—whether code implementation or documentation—is robust, well-thought-out, and aligned with best practices.

---

## For Code Implementation Tasks

- **Understand the Architecture:**  
  Thoroughly review the project architecture and objectives to ensure your work aligns with the overall goals.

ctices:**  
  If needed, perform online searches to  practices, relevant technologies, and packages.

- **Think Out Loud:**  
  Before writing any code, articulate  Outline the approach, and detail your reasoning behind each decision.

- **Seek Feedback:**  
  When necessary, ask for user feedback on your plan, especially if there are areas that could benefit from additional input.

- **Follow Language-Specific Guidelines:**  
  - For TypeScript implementations, adhere to the rules in [typescript.rules.mdc](mdc:.cursor/rules/typescript.rules.mdc)
  - For overall expert coding practices, follow the guidelines in [code-crafter.rules.mdc](mdc:.cursor/rules/code-crafter.rules.mdc)

- **Ensure everyting is as expected**
  - run npm run validate and then build. Fix possible 

---

## For Planning or Documentation Tasks

- **Use Established Architectural Guidelines:**  
  Refer to the guidelines in [software-engineer-and-architect.rules.mdc](mdc:.cursor/rules/software-engineer-and-architect.rules.mdc) to ensure your documentation and planning align with our architectural standards.

- **Think Out Loud About the Plan:**  
  Explain your roadmap, documentation structure, and implementation strategy as you plan. This helps in identifying potential gaps and improvements early.

- **Critically Evaluate and Refine:**  
  Assess your proposed solutions, refine them iteratively, and improve until they are optimal.

- **Leverage Proven Approaches:**  
  Follow and incorporate practices from successful implementations to ensure your solution is robust and effective.

---

## For a plan to improve an existing implementation

in the folder /implementation-plans create a file with the name of the implementation. Inside, craft the documentation for the implementation.

Create a checklist with actionable changes you need to make. Each task should be unitary. 

In this documentation, beside what we need to create, reference the files we need to modify, the reason and what we want to accomplish

---

## Always

- **Check current project structure**
  Deeply understand the structure of the monorepo, the package it contains and what can be re-used.

- **Outline First:**  
  Before doing anything, create a clear outline of your approach. Review and refine it to ensure it covers all bases.

- **Evaluate Before Execution:**  
  Only execute your plan once you are completely confident that it represents the best solution possible.

- **Iterative Improvement:**  
  Continuously judge your work and make improvements until the final output meets all quality and functionality expectations.