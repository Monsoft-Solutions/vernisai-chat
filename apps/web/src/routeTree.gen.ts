/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as EnvTestImport } from "./routes/env-test";
import { Route as DashboardImport } from "./routes/dashboard";
import { Route as AgentBuilderImport } from "./routes/agent-builder";
import { Route as IndexImport } from "./routes/index";
import { Route as ChatIndexImport } from "./routes/chat/index";
import { Route as AgentIndexImport } from "./routes/agent/index";
import { Route as ChatIdImport } from "./routes/chat/$id";
import { Route as AgentCreateImport } from "./routes/agent/create";
import { Route as AgentIdImport } from "./routes/agent/$id";

// Create/Update Routes

const EnvTestRoute = EnvTestImport.update({
  id: "/env-test",
  path: "/env-test",
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRoute,
} as any);

const AgentBuilderRoute = AgentBuilderImport.update({
  id: "/agent-builder",
  path: "/agent-builder",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ChatIndexRoute = ChatIndexImport.update({
  id: "/chat/",
  path: "/chat/",
  getParentRoute: () => rootRoute,
} as any);

const AgentIndexRoute = AgentIndexImport.update({
  id: "/agent/",
  path: "/agent/",
  getParentRoute: () => rootRoute,
} as any);

const ChatIdRoute = ChatIdImport.update({
  id: "/chat/$id",
  path: "/chat/$id",
  getParentRoute: () => rootRoute,
} as any);

const AgentCreateRoute = AgentCreateImport.update({
  id: "/agent/create",
  path: "/agent/create",
  getParentRoute: () => rootRoute,
} as any);

const AgentIdRoute = AgentIdImport.update({
  id: "/agent/$id",
  path: "/agent/$id",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/agent-builder": {
      id: "/agent-builder";
      path: "/agent-builder";
      fullPath: "/agent-builder";
      preLoaderRoute: typeof AgentBuilderImport;
      parentRoute: typeof rootRoute;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    "/env-test": {
      id: "/env-test";
      path: "/env-test";
      fullPath: "/env-test";
      preLoaderRoute: typeof EnvTestImport;
      parentRoute: typeof rootRoute;
    };
    "/agent/$id": {
      id: "/agent/$id";
      path: "/agent/$id";
      fullPath: "/agent/$id";
      preLoaderRoute: typeof AgentIdImport;
      parentRoute: typeof rootRoute;
    };
    "/agent/create": {
      id: "/agent/create";
      path: "/agent/create";
      fullPath: "/agent/create";
      preLoaderRoute: typeof AgentCreateImport;
      parentRoute: typeof rootRoute;
    };
    "/chat/$id": {
      id: "/chat/$id";
      path: "/chat/$id";
      fullPath: "/chat/$id";
      preLoaderRoute: typeof ChatIdImport;
      parentRoute: typeof rootRoute;
    };
    "/agent/": {
      id: "/agent/";
      path: "/agent";
      fullPath: "/agent";
      preLoaderRoute: typeof AgentIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/chat/": {
      id: "/chat/";
      path: "/chat";
      fullPath: "/chat";
      preLoaderRoute: typeof ChatIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/agent-builder": typeof AgentBuilderRoute;
  "/dashboard": typeof DashboardRoute;
  "/env-test": typeof EnvTestRoute;
  "/agent/$id": typeof AgentIdRoute;
  "/agent/create": typeof AgentCreateRoute;
  "/chat/$id": typeof ChatIdRoute;
  "/agent": typeof AgentIndexRoute;
  "/chat": typeof ChatIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/agent-builder": typeof AgentBuilderRoute;
  "/dashboard": typeof DashboardRoute;
  "/env-test": typeof EnvTestRoute;
  "/agent/$id": typeof AgentIdRoute;
  "/agent/create": typeof AgentCreateRoute;
  "/chat/$id": typeof ChatIdRoute;
  "/agent": typeof AgentIndexRoute;
  "/chat": typeof ChatIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/agent-builder": typeof AgentBuilderRoute;
  "/dashboard": typeof DashboardRoute;
  "/env-test": typeof EnvTestRoute;
  "/agent/$id": typeof AgentIdRoute;
  "/agent/create": typeof AgentCreateRoute;
  "/chat/$id": typeof ChatIdRoute;
  "/agent/": typeof AgentIndexRoute;
  "/chat/": typeof ChatIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/agent-builder"
    | "/dashboard"
    | "/env-test"
    | "/agent/$id"
    | "/agent/create"
    | "/chat/$id"
    | "/agent"
    | "/chat";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/agent-builder"
    | "/dashboard"
    | "/env-test"
    | "/agent/$id"
    | "/agent/create"
    | "/chat/$id"
    | "/agent"
    | "/chat";
  id:
    | "__root__"
    | "/"
    | "/agent-builder"
    | "/dashboard"
    | "/env-test"
    | "/agent/$id"
    | "/agent/create"
    | "/chat/$id"
    | "/agent/"
    | "/chat/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AgentBuilderRoute: typeof AgentBuilderRoute;
  DashboardRoute: typeof DashboardRoute;
  EnvTestRoute: typeof EnvTestRoute;
  AgentIdRoute: typeof AgentIdRoute;
  AgentCreateRoute: typeof AgentCreateRoute;
  ChatIdRoute: typeof ChatIdRoute;
  AgentIndexRoute: typeof AgentIndexRoute;
  ChatIndexRoute: typeof ChatIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentBuilderRoute: AgentBuilderRoute,
  DashboardRoute: DashboardRoute,
  EnvTestRoute: EnvTestRoute,
  AgentIdRoute: AgentIdRoute,
  AgentCreateRoute: AgentCreateRoute,
  ChatIdRoute: ChatIdRoute,
  AgentIndexRoute: AgentIndexRoute,
  ChatIndexRoute: ChatIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/agent-builder",
        "/dashboard",
        "/env-test",
        "/agent/$id",
        "/agent/create",
        "/chat/$id",
        "/agent/",
        "/chat/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/agent-builder": {
      "filePath": "agent-builder.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/env-test": {
      "filePath": "env-test.tsx"
    },
    "/agent/$id": {
      "filePath": "agent/$id.tsx"
    },
    "/agent/create": {
      "filePath": "agent/create.tsx"
    },
    "/chat/$id": {
      "filePath": "chat/$id.tsx"
    },
    "/agent/": {
      "filePath": "agent/index.tsx"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
